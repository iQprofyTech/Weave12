services:
  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: weave12
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    volumes:
      - pg:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d weave12 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    command: ["redis-server","--save",""]
    restart: unless-stopped
    volumes:
      - redis:/data
    healthcheck:
      test: ["CMD","redis-cli","ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:RELEASE.2024-06-13T22-53-53Z
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY:-minioadmin}
    command: server /data --console-address ":9001"
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio:/data

  api:
    build:
      context: ../../
      dockerfile: infra/docker/Dockerfile.api
    env_file:
      - ./.env
    command: ["npm","run","dev"]
    working_dir: /app/apps/api
    volumes:
      - ../../:/app
      - /app/node_modules
      - /app/apps/api/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","curl -fsS http://localhost:8080/api/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5

  worker:
    build:
      context: ../../
      dockerfile: infra/docker/Dockerfile.worker
    env_file:
      - ./.env
    command: ["npm","run","dev"]
    working_dir: /app/apps/worker
    volumes:
      - ../../:/app
      - /app/node_modules
      - /app/apps/worker/node_modules
    depends_on:
      api:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","node -e \"process.exit(0)\""]
      interval: 30s
      timeout: 3s
      retries: 3

  web:
    build:
      context: ../../
      dockerfile: infra/docker/Dockerfile.web
    env_file:
      - ./.env
    command: ["npm","run","dev","--","--host","0.0.0.0","--port","5173"]
    working_dir: /app/apps/web
    volumes:
      - ../../:/app
      - /app/node_modules
      - /app/apps/web/node_modules
    depends_on:
      api:
        condition: service_started
    restart: unless-stopped
    ports:
      - "5173:5173"
    healthcheck:
      test: ["CMD-SHELL","curl -fsS http://localhost:5173 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:1.25
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - certs:/etc/letsencrypt
    depends_on:
      web:
        condition: service_started
      api:
        condition: service_started
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","wget -q -O /dev/null http://localhost || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  loki:
    image: grafana/loki:2.9.1
    command: ["-config.file=/etc/loki/local-config.yml"]
    volumes:
      - ./loki-config.yml:/etc/loki/local-config.yml:ro
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.1
    command: ["-config.file=/etc/promtail/config.yml"]
    volumes:
      - /var/log:/var/log:ro
      - ./promtail-config.yml:/etc/promtail/config.yml:ro
    depends_on:
      loki:
        condition: service_started
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.53.0
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.4.2
    ports:
      - "3000:3000"
    depends_on:
      prometheus:
        condition: service_started
    restart: unless-stopped

  # web-prod (закомментирован пример боевого сервера)
  # web-prod:
  #   build:
  #     context: ../../
  #     dockerfile: infra/docker/Dockerfile.web
  #   env_file:
  #     - ./.env
  #   restart: unless-stopped
  #   expose:
  #     - "5173"

volumes:
  pg: {}
  redis: {}
  minio: {}
  certs: {}